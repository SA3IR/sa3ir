//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `Navigator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Navigator.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_RoboCompNavigator_LocalNavigator_ids[2] =
{
    "::Ice::Object",
    "::RoboCompNavigator::LocalNavigator"
};
const ::std::string iceC_RoboCompNavigator_LocalNavigator_ops[] =
{
    "dockingStatus",
    "forkLiftDown",
    "forkLiftUp",
    "goBackWardsTo",
    "goTo",
    "goToBasePoint",
    "goToDockStation",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isActive",
    "rotate",
    "setOdometry",
    "setOrientation",
    "setPathVel",
    "stop"
};
const ::std::string iceC_RoboCompNavigator_LocalNavigator_stop_name = "stop";
const ::std::string iceC_RoboCompNavigator_LocalNavigator_isActive_name = "isActive";
const ::std::string iceC_RoboCompNavigator_LocalNavigator_goTo_name = "goTo";
const ::std::string iceC_RoboCompNavigator_LocalNavigator_goBackWardsTo_name = "goBackWardsTo";
const ::std::string iceC_RoboCompNavigator_LocalNavigator_goToDockStation_name = "goToDockStation";
const ::std::string iceC_RoboCompNavigator_LocalNavigator_goToBasePoint_name = "goToBasePoint";
const ::std::string iceC_RoboCompNavigator_LocalNavigator_rotate_name = "rotate";
const ::std::string iceC_RoboCompNavigator_LocalNavigator_dockingStatus_name = "dockingStatus";
const ::std::string iceC_RoboCompNavigator_LocalNavigator_setOdometry_name = "setOdometry";
const ::std::string iceC_RoboCompNavigator_LocalNavigator_setPathVel_name = "setPathVel";
const ::std::string iceC_RoboCompNavigator_LocalNavigator_setOrientation_name = "setOrientation";
const ::std::string iceC_RoboCompNavigator_LocalNavigator_forkLiftUp_name = "forkLiftUp";
const ::std::string iceC_RoboCompNavigator_LocalNavigator_forkLiftDown_name = "forkLiftDown";

const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_ids[2] =
{
    "::Ice::Object",
    "::RoboCompNavigator::LocalNavigatorReportState"
};
const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "reportAPTSensor",
    "reportForkLiftState",
    "reportLimitSwitchState",
    "reportRobotBatteryLevel",
    "reportRobotPose",
    "reportRobotState"
};
const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotState_name = "reportRobotState";
const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotPose_name = "reportRobotPose";
const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotBatteryLevel_name = "reportRobotBatteryLevel";
const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_reportForkLiftState_name = "reportForkLiftState";
const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_reportAPTSensor_name = "reportAPTSensor";
const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_reportLimitSwitchState_name = "reportLimitSwitchState";

}

bool
RoboCompNavigator::LocalNavigator::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompNavigator_LocalNavigator_ids, iceC_RoboCompNavigator_LocalNavigator_ids + 2, s);
}

::std::vector<::std::string>
RoboCompNavigator::LocalNavigator::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompNavigator_LocalNavigator_ids[0], &iceC_RoboCompNavigator_LocalNavigator_ids[2]);
}

::std::string
RoboCompNavigator::LocalNavigator::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompNavigator::LocalNavigator::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompNavigator::LocalNavigator";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_stop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->stop(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_isActive(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->isActive(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_goTo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_x;
    float iceP_z;
    float iceP_angle;
    istr->readAll(iceP_x, iceP_z, iceP_angle);
    inS.endReadParams();
    bool ret = this->goTo(iceP_x, iceP_z, iceP_angle, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_goBackWardsTo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_x;
    float iceP_z;
    float iceP_angle;
    istr->readAll(iceP_x, iceP_z, iceP_angle);
    inS.endReadParams();
    bool ret = this->goBackWardsTo(iceP_x, iceP_z, iceP_angle, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_goToDockStation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->goToDockStation(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_goToBasePoint(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->goToBasePoint(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_rotate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_angle;
    istr->readAll(iceP_angle);
    inS.endReadParams();
    bool ret = this->rotate(iceP_angle, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_dockingStatus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->dockingStatus(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_setOdometry(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_x;
    float iceP_z;
    float iceP_angle;
    istr->readAll(iceP_x, iceP_z, iceP_angle);
    inS.endReadParams();
    this->setOdometry(iceP_x, iceP_z, iceP_angle, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_setPathVel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Trajectory iceP_path;
    float iceP_advVel;
    float iceP_rotVel;
    istr->readAll(iceP_path, iceP_advVel, iceP_rotVel);
    inS.endReadParams();
    this->setPathVel(::std::move(iceP_path), iceP_advVel, iceP_rotVel, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_setOrientation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_angle;
    istr->readAll(iceP_angle);
    inS.endReadParams();
    bool ret = this->setOrientation(iceP_angle, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_forkLiftUp(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->forkLiftUp(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_forkLiftDown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->forkLiftDown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompNavigator_LocalNavigator_ops, iceC_RoboCompNavigator_LocalNavigator_ops + 17, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompNavigator_LocalNavigator_ops)
    {
        case 0:
        {
            return _iceD_dockingStatus(in, current);
        }
        case 1:
        {
            return _iceD_forkLiftDown(in, current);
        }
        case 2:
        {
            return _iceD_forkLiftUp(in, current);
        }
        case 3:
        {
            return _iceD_goBackWardsTo(in, current);
        }
        case 4:
        {
            return _iceD_goTo(in, current);
        }
        case 5:
        {
            return _iceD_goToBasePoint(in, current);
        }
        case 6:
        {
            return _iceD_goToDockStation(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        case 11:
        {
            return _iceD_isActive(in, current);
        }
        case 12:
        {
            return _iceD_rotate(in, current);
        }
        case 13:
        {
            return _iceD_setOdometry(in, current);
        }
        case 14:
        {
            return _iceD_setOrientation(in, current);
        }
        case 15:
        {
            return _iceD_setPathVel(in, current);
        }
        case 16:
        {
            return _iceD_stop(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
RoboCompNavigator::LocalNavigatorReportState::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompNavigator_LocalNavigatorReportState_ids, iceC_RoboCompNavigator_LocalNavigatorReportState_ids + 2, s);
}

::std::vector<::std::string>
RoboCompNavigator::LocalNavigatorReportState::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompNavigator_LocalNavigatorReportState_ids[0], &iceC_RoboCompNavigator_LocalNavigatorReportState_ids[2]);
}

::std::string
RoboCompNavigator::LocalNavigatorReportState::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompNavigator::LocalNavigatorReportState::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompNavigator::LocalNavigatorReportState";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigatorReportState::_iceD_reportRobotState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_distanceToGoal;
    float iceP_angToGoal;
    int iceP_timeElapsed;
    navigationState iceP_state;
    istr->readAll(iceP_distanceToGoal, iceP_angToGoal, iceP_timeElapsed, iceP_state);
    inS.endReadParams();
    this->reportRobotState(iceP_distanceToGoal, iceP_angToGoal, iceP_timeElapsed, iceP_state, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigatorReportState::_iceD_reportRobotPose(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_x;
    float iceP_z;
    float iceP_angle;
    istr->readAll(iceP_x, iceP_z, iceP_angle);
    inS.endReadParams();
    this->reportRobotPose(iceP_x, iceP_z, iceP_angle, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigatorReportState::_iceD_reportRobotBatteryLevel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    RobotBatteryLevel iceP_batteryLevel;
    istr->readAll(iceP_batteryLevel);
    inS.endReadParams();
    this->reportRobotBatteryLevel(::std::move(iceP_batteryLevel), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigatorReportState::_iceD_reportForkLiftState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_status;
    istr->readAll(iceP_status);
    inS.endReadParams();
    this->reportForkLiftState(::std::move(iceP_status), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigatorReportState::_iceD_reportAPTSensor(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_distance;
    istr->readAll(iceP_distance);
    inS.endReadParams();
    this->reportAPTSensor(iceP_distance, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigatorReportState::_iceD_reportLimitSwitchState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_state;
    istr->readAll(iceP_state);
    inS.endReadParams();
    this->reportLimitSwitchState(iceP_state, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigatorReportState::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompNavigator_LocalNavigatorReportState_ops, iceC_RoboCompNavigator_LocalNavigatorReportState_ops + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompNavigator_LocalNavigatorReportState_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_reportAPTSensor(in, current);
        }
        case 5:
        {
            return _iceD_reportForkLiftState(in, current);
        }
        case 6:
        {
            return _iceD_reportLimitSwitchState(in, current);
        }
        case 7:
        {
            return _iceD_reportRobotBatteryLevel(in, current);
        }
        case 8:
        {
            return _iceD_reportRobotPose(in, current);
        }
        case 9:
        {
            return _iceD_reportRobotState(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorPrx::_iceI_stop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigator_stop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorPrx::_iceI_isActive(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_isActive_name);
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigator_isActive_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorPrx::_iceI_goTo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, float iceP_x, float iceP_z, float iceP_angle, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_goTo_name);
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigator_goTo_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_z, iceP_angle);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorPrx::_iceI_goBackWardsTo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, float iceP_x, float iceP_z, float iceP_angle, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_goBackWardsTo_name);
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigator_goBackWardsTo_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_z, iceP_angle);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorPrx::_iceI_goToDockStation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_goToDockStation_name);
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigator_goToDockStation_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorPrx::_iceI_goToBasePoint(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_goToBasePoint_name);
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigator_goToBasePoint_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorPrx::_iceI_rotate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, float iceP_angle, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_rotate_name);
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigator_rotate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_angle);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorPrx::_iceI_dockingStatus(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_dockingStatus_name);
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigator_dockingStatus_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorPrx::_iceI_setOdometry(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, float iceP_x, float iceP_z, float iceP_angle, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigator_setOdometry_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_z, iceP_angle);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorPrx::_iceI_setPathVel(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const Trajectory& iceP_path, float iceP_advVel, float iceP_rotVel, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigator_setPathVel_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_path, iceP_advVel, iceP_rotVel);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorPrx::_iceI_setOrientation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, float iceP_angle, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_setOrientation_name);
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigator_setOrientation_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_angle);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorPrx::_iceI_forkLiftUp(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigator_forkLiftUp_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorPrx::_iceI_forkLiftDown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigator_forkLiftDown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompNavigator::LocalNavigatorPrx::_newInstance() const
{
    return ::IceInternal::createProxy<LocalNavigatorPrx>();
}
/// \endcond

const ::std::string&
RoboCompNavigator::LocalNavigatorPrx::ice_staticId()
{
    return LocalNavigator::ice_staticId();
}

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorReportStatePrx::_iceI_reportRobotState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, float iceP_distanceToGoal, float iceP_angToGoal, int iceP_timeElapsed, navigationState iceP_state, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotState_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_distanceToGoal, iceP_angToGoal, iceP_timeElapsed, iceP_state);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorReportStatePrx::_iceI_reportRobotPose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, float iceP_x, float iceP_z, float iceP_angle, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotPose_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_z, iceP_angle);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorReportStatePrx::_iceI_reportRobotBatteryLevel(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const RobotBatteryLevel& iceP_batteryLevel, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotBatteryLevel_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_batteryLevel);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorReportStatePrx::_iceI_reportForkLiftState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_status, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigatorReportState_reportForkLiftState_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_status);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorReportStatePrx::_iceI_reportAPTSensor(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, float iceP_distance, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigatorReportState_reportAPTSensor_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_distance);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::LocalNavigatorReportStatePrx::_iceI_reportLimitSwitchState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_state, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompNavigator_LocalNavigatorReportState_reportLimitSwitchState_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_state);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompNavigator::LocalNavigatorReportStatePrx::_newInstance() const
{
    return ::IceInternal::createProxy<LocalNavigatorReportStatePrx>();
}
/// \endcond

const ::std::string&
RoboCompNavigator::LocalNavigatorReportStatePrx::ice_staticId()
{
    return LocalNavigatorReportState::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompNavigator_LocalNavigator_stop_name = "stop";

const ::std::string iceC_RoboCompNavigator_LocalNavigator_isActive_name = "isActive";

const ::std::string iceC_RoboCompNavigator_LocalNavigator_goTo_name = "goTo";

const ::std::string iceC_RoboCompNavigator_LocalNavigator_goBackWardsTo_name = "goBackWardsTo";

const ::std::string iceC_RoboCompNavigator_LocalNavigator_goToDockStation_name = "goToDockStation";

const ::std::string iceC_RoboCompNavigator_LocalNavigator_goToBasePoint_name = "goToBasePoint";

const ::std::string iceC_RoboCompNavigator_LocalNavigator_rotate_name = "rotate";

const ::std::string iceC_RoboCompNavigator_LocalNavigator_dockingStatus_name = "dockingStatus";

const ::std::string iceC_RoboCompNavigator_LocalNavigator_setOdometry_name = "setOdometry";

const ::std::string iceC_RoboCompNavigator_LocalNavigator_setPathVel_name = "setPathVel";

const ::std::string iceC_RoboCompNavigator_LocalNavigator_setOrientation_name = "setOrientation";

const ::std::string iceC_RoboCompNavigator_LocalNavigator_forkLiftUp_name = "forkLiftUp";

const ::std::string iceC_RoboCompNavigator_LocalNavigator_forkLiftDown_name = "forkLiftDown";

const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotState_name = "reportRobotState";

const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotPose_name = "reportRobotPose";

const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotBatteryLevel_name = "reportRobotBatteryLevel";

const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_reportForkLiftState_name = "reportForkLiftState";

const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_reportAPTSensor_name = "reportAPTSensor";

const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_reportLimitSwitchState_name = "reportLimitSwitchState";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompNavigator::upCast(LocalNavigator* p) { return p; }

void
::IceProxy::RoboCompNavigator::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< LocalNavigator>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new LocalNavigator;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigator::_iceI_begin_stop(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigator_stop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigator_stop_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigator_stop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompNavigator::LocalNavigator::end_stop(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompNavigator_LocalNavigator_stop_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigator::_iceI_begin_isActive(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_isActive_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigator_isActive_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigator_isActive_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigator_isActive_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompNavigator::LocalNavigator::end_isActive(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompNavigator_LocalNavigator_isActive_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigator::_iceI_begin_goTo(::Ice::Float iceP_x, ::Ice::Float iceP_z, ::Ice::Float iceP_angle, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_goTo_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigator_goTo_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigator_goTo_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_z);
        ostr->write(iceP_angle);
        result->endWriteParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigator_goTo_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompNavigator::LocalNavigator::end_goTo(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompNavigator_LocalNavigator_goTo_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigator::_iceI_begin_goBackWardsTo(::Ice::Float iceP_x, ::Ice::Float iceP_z, ::Ice::Float iceP_angle, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_goBackWardsTo_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigator_goBackWardsTo_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigator_goBackWardsTo_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_z);
        ostr->write(iceP_angle);
        result->endWriteParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigator_goBackWardsTo_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompNavigator::LocalNavigator::end_goBackWardsTo(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompNavigator_LocalNavigator_goBackWardsTo_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigator::_iceI_begin_goToDockStation(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_goToDockStation_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigator_goToDockStation_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigator_goToDockStation_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigator_goToDockStation_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompNavigator::LocalNavigator::end_goToDockStation(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompNavigator_LocalNavigator_goToDockStation_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigator::_iceI_begin_goToBasePoint(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_goToBasePoint_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigator_goToBasePoint_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigator_goToBasePoint_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigator_goToBasePoint_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompNavigator::LocalNavigator::end_goToBasePoint(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompNavigator_LocalNavigator_goToBasePoint_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigator::_iceI_begin_rotate(::Ice::Float iceP_angle, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_rotate_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigator_rotate_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigator_rotate_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_angle);
        result->endWriteParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigator_rotate_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompNavigator::LocalNavigator::end_rotate(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompNavigator_LocalNavigator_rotate_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigator::_iceI_begin_dockingStatus(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_dockingStatus_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigator_dockingStatus_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigator_dockingStatus_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigator_dockingStatus_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::RoboCompNavigator::LocalNavigator::end_dockingStatus(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompNavigator_LocalNavigator_dockingStatus_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigator::_iceI_begin_setOdometry(::Ice::Float iceP_x, ::Ice::Float iceP_z, ::Ice::Float iceP_angle, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigator_setOdometry_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigator_setOdometry_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_z);
        ostr->write(iceP_angle);
        result->endWriteParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigator_setOdometry_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompNavigator::LocalNavigator::end_setOdometry(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompNavigator_LocalNavigator_setOdometry_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigator::_iceI_begin_setPathVel(const ::RoboCompNavigator::Trajectory& iceP_path, ::Ice::Float iceP_advVel, ::Ice::Float iceP_rotVel, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigator_setPathVel_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigator_setPathVel_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_path);
        ostr->write(iceP_advVel);
        ostr->write(iceP_rotVel);
        result->endWriteParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigator_setPathVel_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompNavigator::LocalNavigator::end_setPathVel(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompNavigator_LocalNavigator_setPathVel_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigator::_iceI_begin_setOrientation(::Ice::Float iceP_angle, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompNavigator_LocalNavigator_setOrientation_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigator_setOrientation_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigator_setOrientation_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_angle);
        result->endWriteParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigator_setOrientation_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompNavigator::LocalNavigator::end_setOrientation(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompNavigator_LocalNavigator_setOrientation_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigator::_iceI_begin_forkLiftUp(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigator_forkLiftUp_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigator_forkLiftUp_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigator_forkLiftUp_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompNavigator::LocalNavigator::end_forkLiftUp(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompNavigator_LocalNavigator_forkLiftUp_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigator::_iceI_begin_forkLiftDown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigator_forkLiftDown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigator_forkLiftDown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigator_forkLiftDown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompNavigator::LocalNavigator::end_forkLiftDown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompNavigator_LocalNavigator_forkLiftDown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompNavigator::LocalNavigator::_newInstance() const
{
    return new LocalNavigator;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompNavigator::LocalNavigator::ice_staticId()
{
    return ::RoboCompNavigator::LocalNavigator::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompNavigator::upCast(LocalNavigatorReportState* p) { return p; }

void
::IceProxy::RoboCompNavigator::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< LocalNavigatorReportState>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new LocalNavigatorReportState;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigatorReportState::_iceI_begin_reportRobotState(::Ice::Float iceP_distanceToGoal, ::Ice::Float iceP_angToGoal, ::Ice::Int iceP_timeElapsed, ::RoboCompNavigator::navigationState iceP_state, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotState_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotState_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_distanceToGoal);
        ostr->write(iceP_angToGoal);
        ostr->write(iceP_timeElapsed);
        ostr->write(iceP_state);
        result->endWriteParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotState_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompNavigator::LocalNavigatorReportState::end_reportRobotState(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotState_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigatorReportState::_iceI_begin_reportRobotPose(::Ice::Float iceP_x, ::Ice::Float iceP_z, ::Ice::Float iceP_angle, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotPose_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotPose_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_z);
        ostr->write(iceP_angle);
        result->endWriteParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotPose_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompNavigator::LocalNavigatorReportState::end_reportRobotPose(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotPose_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigatorReportState::_iceI_begin_reportRobotBatteryLevel(const ::RoboCompNavigator::RobotBatteryLevel& iceP_batteryLevel, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotBatteryLevel_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotBatteryLevel_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_batteryLevel);
        result->endWriteParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotBatteryLevel_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompNavigator::LocalNavigatorReportState::end_reportRobotBatteryLevel(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompNavigator_LocalNavigatorReportState_reportRobotBatteryLevel_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigatorReportState::_iceI_begin_reportForkLiftState(const ::std::string& iceP_status, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigatorReportState_reportForkLiftState_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigatorReportState_reportForkLiftState_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_status);
        result->endWriteParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigatorReportState_reportForkLiftState_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompNavigator::LocalNavigatorReportState::end_reportForkLiftState(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompNavigator_LocalNavigatorReportState_reportForkLiftState_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigatorReportState::_iceI_begin_reportAPTSensor(::Ice::Float iceP_distance, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigatorReportState_reportAPTSensor_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigatorReportState_reportAPTSensor_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_distance);
        result->endWriteParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigatorReportState_reportAPTSensor_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompNavigator::LocalNavigatorReportState::end_reportAPTSensor(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompNavigator_LocalNavigatorReportState_reportAPTSensor_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompNavigator::LocalNavigatorReportState::_iceI_begin_reportLimitSwitchState(bool iceP_state, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompNavigator_LocalNavigatorReportState_reportLimitSwitchState_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompNavigator_LocalNavigatorReportState_reportLimitSwitchState_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_state);
        result->endWriteParams();
        result->invoke(iceC_RoboCompNavigator_LocalNavigatorReportState_reportLimitSwitchState_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompNavigator::LocalNavigatorReportState::end_reportLimitSwitchState(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompNavigator_LocalNavigatorReportState_reportLimitSwitchState_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompNavigator::LocalNavigatorReportState::_newInstance() const
{
    return new LocalNavigatorReportState;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompNavigator::LocalNavigatorReportState::ice_staticId()
{
    return ::RoboCompNavigator::LocalNavigatorReportState::ice_staticId();
}

RoboCompNavigator::LocalNavigator::~LocalNavigator()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompNavigator::upCast(LocalNavigator* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompNavigator_LocalNavigator_ids[2] =
{
    "::Ice::Object",
    "::RoboCompNavigator::LocalNavigator"
};

}

bool
RoboCompNavigator::LocalNavigator::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompNavigator_LocalNavigator_ids, iceC_RoboCompNavigator_LocalNavigator_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompNavigator::LocalNavigator::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompNavigator_LocalNavigator_ids[0], &iceC_RoboCompNavigator_LocalNavigator_ids[2]);
}

const ::std::string&
RoboCompNavigator::LocalNavigator::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompNavigator::LocalNavigator::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompNavigator::LocalNavigator";
    return typeId;
#else
    return iceC_RoboCompNavigator_LocalNavigator_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_stop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->stop(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_isActive(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->isActive(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_goTo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_x;
    ::Ice::Float iceP_z;
    ::Ice::Float iceP_angle;
    istr->read(iceP_x);
    istr->read(iceP_z);
    istr->read(iceP_angle);
    inS.endReadParams();
    bool ret = this->goTo(iceP_x, iceP_z, iceP_angle, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_goBackWardsTo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_x;
    ::Ice::Float iceP_z;
    ::Ice::Float iceP_angle;
    istr->read(iceP_x);
    istr->read(iceP_z);
    istr->read(iceP_angle);
    inS.endReadParams();
    bool ret = this->goBackWardsTo(iceP_x, iceP_z, iceP_angle, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_goToDockStation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->goToDockStation(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_goToBasePoint(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->goToBasePoint(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_rotate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_angle;
    istr->read(iceP_angle);
    inS.endReadParams();
    bool ret = this->rotate(iceP_angle, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_dockingStatus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->dockingStatus(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_setOdometry(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_x;
    ::Ice::Float iceP_z;
    ::Ice::Float iceP_angle;
    istr->read(iceP_x);
    istr->read(iceP_z);
    istr->read(iceP_angle);
    inS.endReadParams();
    this->setOdometry(iceP_x, iceP_z, iceP_angle, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_setPathVel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    Trajectory iceP_path;
    ::Ice::Float iceP_advVel;
    ::Ice::Float iceP_rotVel;
    istr->read(iceP_path);
    istr->read(iceP_advVel);
    istr->read(iceP_rotVel);
    inS.endReadParams();
    this->setPathVel(iceP_path, iceP_advVel, iceP_rotVel, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_setOrientation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_angle;
    istr->read(iceP_angle);
    inS.endReadParams();
    bool ret = this->setOrientation(iceP_angle, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_forkLiftUp(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->forkLiftUp(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceD_forkLiftDown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->forkLiftDown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompNavigator_LocalNavigator_all[] =
{
    "dockingStatus",
    "forkLiftDown",
    "forkLiftUp",
    "goBackWardsTo",
    "goTo",
    "goToBasePoint",
    "goToDockStation",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isActive",
    "rotate",
    "setOdometry",
    "setOrientation",
    "setPathVel",
    "stop"
};

}

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigator::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompNavigator_LocalNavigator_all, iceC_RoboCompNavigator_LocalNavigator_all + 17, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompNavigator_LocalNavigator_all)
    {
        case 0:
        {
            return _iceD_dockingStatus(in, current);
        }
        case 1:
        {
            return _iceD_forkLiftDown(in, current);
        }
        case 2:
        {
            return _iceD_forkLiftUp(in, current);
        }
        case 3:
        {
            return _iceD_goBackWardsTo(in, current);
        }
        case 4:
        {
            return _iceD_goTo(in, current);
        }
        case 5:
        {
            return _iceD_goToBasePoint(in, current);
        }
        case 6:
        {
            return _iceD_goToDockStation(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        case 11:
        {
            return _iceD_isActive(in, current);
        }
        case 12:
        {
            return _iceD_rotate(in, current);
        }
        case 13:
        {
            return _iceD_setOdometry(in, current);
        }
        case 14:
        {
            return _iceD_setOrientation(in, current);
        }
        case 15:
        {
            return _iceD_setPathVel(in, current);
        }
        case 16:
        {
            return _iceD_stop(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompNavigator::LocalNavigator::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< LocalNavigator, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompNavigator::LocalNavigator::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< LocalNavigator, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::_icePatchObjectPtr(LocalNavigatorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = LocalNavigatorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(LocalNavigator::ice_staticId(), v);
    }
}
/// \endcond

RoboCompNavigator::LocalNavigatorReportState::~LocalNavigatorReportState()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompNavigator::upCast(LocalNavigatorReportState* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_ids[2] =
{
    "::Ice::Object",
    "::RoboCompNavigator::LocalNavigatorReportState"
};

}

bool
RoboCompNavigator::LocalNavigatorReportState::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompNavigator_LocalNavigatorReportState_ids, iceC_RoboCompNavigator_LocalNavigatorReportState_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompNavigator::LocalNavigatorReportState::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompNavigator_LocalNavigatorReportState_ids[0], &iceC_RoboCompNavigator_LocalNavigatorReportState_ids[2]);
}

const ::std::string&
RoboCompNavigator::LocalNavigatorReportState::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompNavigator::LocalNavigatorReportState::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompNavigator::LocalNavigatorReportState";
    return typeId;
#else
    return iceC_RoboCompNavigator_LocalNavigatorReportState_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigatorReportState::_iceD_reportRobotState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_distanceToGoal;
    ::Ice::Float iceP_angToGoal;
    ::Ice::Int iceP_timeElapsed;
    navigationState iceP_state;
    istr->read(iceP_distanceToGoal);
    istr->read(iceP_angToGoal);
    istr->read(iceP_timeElapsed);
    istr->read(iceP_state);
    inS.endReadParams();
    this->reportRobotState(iceP_distanceToGoal, iceP_angToGoal, iceP_timeElapsed, iceP_state, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigatorReportState::_iceD_reportRobotPose(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_x;
    ::Ice::Float iceP_z;
    ::Ice::Float iceP_angle;
    istr->read(iceP_x);
    istr->read(iceP_z);
    istr->read(iceP_angle);
    inS.endReadParams();
    this->reportRobotPose(iceP_x, iceP_z, iceP_angle, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigatorReportState::_iceD_reportRobotBatteryLevel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    RobotBatteryLevel iceP_batteryLevel;
    istr->read(iceP_batteryLevel);
    inS.endReadParams();
    this->reportRobotBatteryLevel(iceP_batteryLevel, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigatorReportState::_iceD_reportForkLiftState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_status;
    istr->read(iceP_status);
    inS.endReadParams();
    this->reportForkLiftState(iceP_status, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigatorReportState::_iceD_reportAPTSensor(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_distance;
    istr->read(iceP_distance);
    inS.endReadParams();
    this->reportAPTSensor(iceP_distance, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigatorReportState::_iceD_reportLimitSwitchState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    bool iceP_state;
    istr->read(iceP_state);
    inS.endReadParams();
    this->reportLimitSwitchState(iceP_state, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompNavigator_LocalNavigatorReportState_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "reportAPTSensor",
    "reportForkLiftState",
    "reportLimitSwitchState",
    "reportRobotBatteryLevel",
    "reportRobotPose",
    "reportRobotState"
};

}

/// \cond INTERNAL
bool
RoboCompNavigator::LocalNavigatorReportState::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompNavigator_LocalNavigatorReportState_all, iceC_RoboCompNavigator_LocalNavigatorReportState_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompNavigator_LocalNavigatorReportState_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_reportAPTSensor(in, current);
        }
        case 5:
        {
            return _iceD_reportForkLiftState(in, current);
        }
        case 6:
        {
            return _iceD_reportLimitSwitchState(in, current);
        }
        case 7:
        {
            return _iceD_reportRobotBatteryLevel(in, current);
        }
        case 8:
        {
            return _iceD_reportRobotPose(in, current);
        }
        case 9:
        {
            return _iceD_reportRobotState(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompNavigator::LocalNavigatorReportState::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< LocalNavigatorReportState, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompNavigator::LocalNavigatorReportState::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< LocalNavigatorReportState, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompNavigator::_icePatchObjectPtr(LocalNavigatorReportStatePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = LocalNavigatorReportStatePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(LocalNavigatorReportState::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
