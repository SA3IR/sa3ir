// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `personFollower.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __personFollower_h__
#define __personFollower_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboComppersonFollower
{

class personFollower;
class personFollowerPrx;

}

namespace RoboComppersonFollower
{

struct Pose
{
    float x;
    float y;
    float z;
    float orientation;

    std::tuple<const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y, z, orientation);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboComppersonFollower
{

class personFollower : public virtual ::Ice::Object
{
public:

    using ProxyType = personFollowerPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void updatePersonPose(::RoboComppersonFollower::Pose, const ::Ice::Current&) = 0;
    bool _iceD_updatePersonPose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void personLost(const ::Ice::Current&) = 0;
    bool _iceD_personLost(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboComppersonFollower
{

class personFollowerPrx : public virtual ::Ice::Proxy<personFollowerPrx, ::Ice::ObjectPrx>
{
public:

    void updatePersonPose(const ::RoboComppersonFollower::Pose& iceP_p, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboComppersonFollower::personFollowerPrx::_iceI_updatePersonPose, iceP_p, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto updatePersonPoseAsync(const ::RoboComppersonFollower::Pose& iceP_p, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboComppersonFollower::personFollowerPrx::_iceI_updatePersonPose, iceP_p, context);
    }

    ::std::function<void()>
    updatePersonPoseAsync(const ::RoboComppersonFollower::Pose& iceP_p,
                          ::std::function<void()> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboComppersonFollower::personFollowerPrx::_iceI_updatePersonPose, iceP_p, context);
    }

    void _iceI_updatePersonPose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboComppersonFollower::Pose&, const ::Ice::Context&);

    void personLost(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboComppersonFollower::personFollowerPrx::_iceI_personLost, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto personLostAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboComppersonFollower::personFollowerPrx::_iceI_personLost, context);
    }

    ::std::function<void()>
    personLostAsync(::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboComppersonFollower::personFollowerPrx::_iceI_personLost, context);
    }

    void _iceI_personLost(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    personFollowerPrx() = default;
    friend ::std::shared_ptr<personFollowerPrx> IceInternal::createProxy<personFollowerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<>
struct StreamableTraits<::RoboComppersonFollower::Pose>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboComppersonFollower::Pose, S>
{
    static void read(S* istr, ::RoboComppersonFollower::Pose& v)
    {
        istr->readAll(v.x, v.y, v.z, v.orientation);
    }
};

}

namespace RoboComppersonFollower
{

using personFollowerPtr = ::std::shared_ptr<personFollower>;
using personFollowerPrxPtr = ::std::shared_ptr<personFollowerPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboComppersonFollower
{

class personFollower;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboComppersonFollower::personFollower>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboComppersonFollower::personFollower*);

}

}

namespace RoboComppersonFollower
{

class personFollower;
::Ice::Object* upCast(::RoboComppersonFollower::personFollower*);
typedef ::IceInternal::Handle< ::RoboComppersonFollower::personFollower> personFollowerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboComppersonFollower::personFollower> personFollowerPrx;
typedef personFollowerPrx personFollowerPrxPtr;
void _icePatchObjectPtr(personFollowerPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboComppersonFollower
{

struct Pose
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float orientation;

    bool operator==(const Pose& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(x != rhs_.x)
        {
            return false;
        }
        if(y != rhs_.y)
        {
            return false;
        }
        if(z != rhs_.z)
        {
            return false;
        }
        if(orientation != rhs_.orientation)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Pose& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(x < rhs_.x)
        {
            return true;
        }
        else if(rhs_.x < x)
        {
            return false;
        }
        if(y < rhs_.y)
        {
            return true;
        }
        else if(rhs_.y < y)
        {
            return false;
        }
        if(z < rhs_.z)
        {
            return true;
        }
        else if(rhs_.z < z)
        {
            return false;
        }
        if(orientation < rhs_.orientation)
        {
            return true;
        }
        else if(rhs_.orientation < orientation)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Pose& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const Pose& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const Pose& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const Pose& rhs_) const
    {
        return !operator<(rhs_);
    }
};

}

namespace RoboComppersonFollower
{

class Callback_personFollower_updatePersonPose_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_personFollower_updatePersonPose_Base> Callback_personFollower_updatePersonPosePtr;

class Callback_personFollower_personLost_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_personFollower_personLost_Base> Callback_personFollower_personLostPtr;

}

namespace IceProxy
{

namespace RoboComppersonFollower
{

class personFollower : public virtual ::Ice::Proxy<personFollower, ::IceProxy::Ice::Object>
{
public:

    void updatePersonPose(const ::RoboComppersonFollower::Pose& iceP_p, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_updatePersonPose(_iceI_begin_updatePersonPose(iceP_p, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_updatePersonPose(const ::RoboComppersonFollower::Pose& iceP_p, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_updatePersonPose(iceP_p, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updatePersonPose(const ::RoboComppersonFollower::Pose& iceP_p, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_updatePersonPose(iceP_p, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_updatePersonPose(const ::RoboComppersonFollower::Pose& iceP_p, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_updatePersonPose(iceP_p, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_updatePersonPose(const ::RoboComppersonFollower::Pose& iceP_p, const ::RoboComppersonFollower::Callback_personFollower_updatePersonPosePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_updatePersonPose(iceP_p, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_updatePersonPose(const ::RoboComppersonFollower::Pose& iceP_p, const ::Ice::Context& context, const ::RoboComppersonFollower::Callback_personFollower_updatePersonPosePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_updatePersonPose(iceP_p, context, del, cookie);
    }

    void end_updatePersonPose(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_updatePersonPose(const ::RoboComppersonFollower::Pose&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void personLost(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_personLost(_iceI_begin_personLost(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_personLost(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_personLost(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_personLost(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_personLost(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_personLost(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_personLost(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_personLost(const ::RoboComppersonFollower::Callback_personFollower_personLostPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_personLost(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_personLost(const ::Ice::Context& context, const ::RoboComppersonFollower::Callback_personFollower_personLostPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_personLost(context, del, cookie);
    }

    void end_personLost(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_personLost(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboComppersonFollower
{

class personFollower : public virtual ::Ice::Object
{
public:

    typedef personFollowerPrx ProxyType;
    typedef personFollowerPtr PointerType;

    virtual ~personFollower();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void updatePersonPose(const ::RoboComppersonFollower::Pose&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_updatePersonPose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void personLost(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_personLost(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const personFollower& lhs, const personFollower& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const personFollower& lhs, const personFollower& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboComppersonFollower::Pose>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboComppersonFollower::Pose, S>
{
    static void write(S* ostr, const ::RoboComppersonFollower::Pose& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.orientation);
    }
};

template<typename S>
struct StreamReader< ::RoboComppersonFollower::Pose, S>
{
    static void read(S* istr, ::RoboComppersonFollower::Pose& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.orientation);
    }
};

}

namespace RoboComppersonFollower
{

template<class T>
class CallbackNC_personFollower_updatePersonPose : public Callback_personFollower_updatePersonPose_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_personFollower_updatePersonPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_personFollower_updatePersonPosePtr
newCallback_personFollower_updatePersonPose(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_personFollower_updatePersonPose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_personFollower_updatePersonPosePtr
newCallback_personFollower_updatePersonPose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_personFollower_updatePersonPose<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_personFollower_updatePersonPosePtr
newCallback_personFollower_updatePersonPose(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_personFollower_updatePersonPose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_personFollower_updatePersonPosePtr
newCallback_personFollower_updatePersonPose(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_personFollower_updatePersonPose<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_personFollower_updatePersonPose : public Callback_personFollower_updatePersonPose_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_personFollower_updatePersonPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_personFollower_updatePersonPosePtr
newCallback_personFollower_updatePersonPose(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_personFollower_updatePersonPose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_personFollower_updatePersonPosePtr
newCallback_personFollower_updatePersonPose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_personFollower_updatePersonPose<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_personFollower_updatePersonPosePtr
newCallback_personFollower_updatePersonPose(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_personFollower_updatePersonPose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_personFollower_updatePersonPosePtr
newCallback_personFollower_updatePersonPose(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_personFollower_updatePersonPose<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_personFollower_personLost : public Callback_personFollower_personLost_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_personFollower_personLost(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_personFollower_personLostPtr
newCallback_personFollower_personLost(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_personFollower_personLost<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_personFollower_personLostPtr
newCallback_personFollower_personLost(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_personFollower_personLost<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_personFollower_personLostPtr
newCallback_personFollower_personLost(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_personFollower_personLost<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_personFollower_personLostPtr
newCallback_personFollower_personLost(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_personFollower_personLost<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_personFollower_personLost : public Callback_personFollower_personLost_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_personFollower_personLost(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_personFollower_personLostPtr
newCallback_personFollower_personLost(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_personFollower_personLost<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_personFollower_personLostPtr
newCallback_personFollower_personLost(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_personFollower_personLost<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_personFollower_personLostPtr
newCallback_personFollower_personLost(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_personFollower_personLost<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_personFollower_personLostPtr
newCallback_personFollower_personLost(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_personFollower_personLost<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
