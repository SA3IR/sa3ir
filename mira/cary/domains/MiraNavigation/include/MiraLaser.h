//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `MiraLaser.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __MiraLaser_h__
#define __MiraLaser_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompMiraLaser
{

class LaserReporter;
class LaserReporterPrx;
class Laser;
class LaserPrx;

}

namespace RoboCompMiraLaser
{

struct PointT
{
    float x;
    float y;
    float angle;
    float range;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y, angle, range);
    }
};

using LaserDataT = ::std::vector<PointT>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompMiraLaser
{

class LaserReporter : public virtual ::Ice::Object
{
public:

    using ProxyType = LaserReporterPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void toggleLaserReport(bool enable, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_toggleLaserReport(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class Laser : public virtual ::Ice::Object
{
public:

    using ProxyType = LaserPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void reportLaserData(LaserDataT data, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_reportLaserData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompMiraLaser
{

class LaserReporterPrx : public virtual ::Ice::Proxy<LaserReporterPrx, ::Ice::ObjectPrx>
{
public:

    void toggleLaserReport(bool enable, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &LaserReporterPrx::_iceI_toggleLaserReport, enable, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto toggleLaserReportAsync(bool enable, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &LaserReporterPrx::_iceI_toggleLaserReport, enable, context);
    }

    ::std::function<void()>
    toggleLaserReportAsync(bool enable,
                           ::std::function<void()> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompMiraLaser::LaserReporterPrx::_iceI_toggleLaserReport, enable, context);
    }

    /// \cond INTERNAL
    void _iceI_toggleLaserReport(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, bool, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    LaserReporterPrx() = default;
    friend ::std::shared_ptr<LaserReporterPrx> IceInternal::createProxy<LaserReporterPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class LaserPrx : public virtual ::Ice::Proxy<LaserPrx, ::Ice::ObjectPrx>
{
public:

    void reportLaserData(const LaserDataT& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &LaserPrx::_iceI_reportLaserData, data, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto reportLaserDataAsync(const LaserDataT& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &LaserPrx::_iceI_reportLaserData, data, context);
    }

    ::std::function<void()>
    reportLaserDataAsync(const LaserDataT& data,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompMiraLaser::LaserPrx::_iceI_reportLaserData, data, context);
    }

    /// \cond INTERNAL
    void _iceI_reportLaserData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const LaserDataT&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    LaserPrx() = default;
    friend ::std::shared_ptr<LaserPrx> IceInternal::createProxy<LaserPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompMiraLaser::PointT>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompMiraLaser::PointT, S>
{
    static void read(S* istr, ::RoboCompMiraLaser::PointT& v)
    {
        istr->readAll(v.x, v.y, v.angle, v.range);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompMiraLaser
{

using LaserReporterPtr = ::std::shared_ptr<LaserReporter>;
using LaserReporterPrxPtr = ::std::shared_ptr<LaserReporterPrx>;

using LaserPtr = ::std::shared_ptr<Laser>;
using LaserPrxPtr = ::std::shared_ptr<LaserPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompMiraLaser
{

class LaserReporter;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< LaserReporter>&);
::IceProxy::Ice::Object* upCast(LaserReporter*);
/// \endcond

class Laser;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Laser>&);
::IceProxy::Ice::Object* upCast(Laser*);
/// \endcond

}

}

namespace RoboCompMiraLaser
{

class LaserReporter;
/// \cond INTERNAL
::Ice::Object* upCast(LaserReporter*);
/// \endcond
typedef ::IceInternal::Handle< LaserReporter> LaserReporterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMiraLaser::LaserReporter> LaserReporterPrx;
typedef LaserReporterPrx LaserReporterPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(LaserReporterPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class Laser;
/// \cond INTERNAL
::Ice::Object* upCast(Laser*);
/// \endcond
typedef ::IceInternal::Handle< Laser> LaserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMiraLaser::Laser> LaserPrx;
typedef LaserPrx LaserPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(LaserPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompMiraLaser
{

struct PointT
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float angle;
    ::Ice::Float range;

    bool operator==(const PointT& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(x != rhs_.x)
        {
            return false;
        }
        if(y != rhs_.y)
        {
            return false;
        }
        if(angle != rhs_.angle)
        {
            return false;
        }
        if(range != rhs_.range)
        {
            return false;
        }
        return true;
    }

    bool operator<(const PointT& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(x < rhs_.x)
        {
            return true;
        }
        else if(rhs_.x < x)
        {
            return false;
        }
        if(y < rhs_.y)
        {
            return true;
        }
        else if(rhs_.y < y)
        {
            return false;
        }
        if(angle < rhs_.angle)
        {
            return true;
        }
        else if(rhs_.angle < angle)
        {
            return false;
        }
        if(range < rhs_.range)
        {
            return true;
        }
        else if(rhs_.range < range)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const PointT& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const PointT& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const PointT& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const PointT& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector<PointT> LaserDataT;

}

namespace RoboCompMiraLaser
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompMiraLaser::LaserReporter::begin_toggleLaserReport.
 * Create a wrapper instance by calling ::RoboCompMiraLaser::newCallback_LaserReporter_toggleLaserReport.
 */
class Callback_LaserReporter_toggleLaserReport_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LaserReporter_toggleLaserReport_Base> Callback_LaserReporter_toggleLaserReportPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompMiraLaser::Laser::begin_reportLaserData.
 * Create a wrapper instance by calling ::RoboCompMiraLaser::newCallback_Laser_reportLaserData.
 */
class Callback_Laser_reportLaserData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Laser_reportLaserData_Base> Callback_Laser_reportLaserDataPtr;

}

namespace IceProxy
{

namespace RoboCompMiraLaser
{

class LaserReporter : public virtual ::Ice::Proxy<LaserReporter, ::IceProxy::Ice::Object>
{
public:

    void toggleLaserReport(bool enable, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_toggleLaserReport(_iceI_begin_toggleLaserReport(enable, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_toggleLaserReport(bool enable, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_toggleLaserReport(enable, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_toggleLaserReport(bool enable, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_toggleLaserReport(enable, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_toggleLaserReport(bool enable, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_toggleLaserReport(enable, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_toggleLaserReport(bool enable, const ::RoboCompMiraLaser::Callback_LaserReporter_toggleLaserReportPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_toggleLaserReport(enable, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_toggleLaserReport(bool enable, const ::Ice::Context& context, const ::RoboCompMiraLaser::Callback_LaserReporter_toggleLaserReportPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_toggleLaserReport(enable, context, cb, cookie);
    }

    void end_toggleLaserReport(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_toggleLaserReport(bool, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Laser : public virtual ::Ice::Proxy<Laser, ::IceProxy::Ice::Object>
{
public:

    void reportLaserData(const ::RoboCompMiraLaser::LaserDataT& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_reportLaserData(_iceI_begin_reportLaserData(data, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_reportLaserData(const ::RoboCompMiraLaser::LaserDataT& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_reportLaserData(data, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reportLaserData(const ::RoboCompMiraLaser::LaserDataT& data, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reportLaserData(data, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_reportLaserData(const ::RoboCompMiraLaser::LaserDataT& data, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reportLaserData(data, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_reportLaserData(const ::RoboCompMiraLaser::LaserDataT& data, const ::RoboCompMiraLaser::Callback_Laser_reportLaserDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reportLaserData(data, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_reportLaserData(const ::RoboCompMiraLaser::LaserDataT& data, const ::Ice::Context& context, const ::RoboCompMiraLaser::Callback_Laser_reportLaserDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reportLaserData(data, context, cb, cookie);
    }

    void end_reportLaserData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_reportLaserData(const ::RoboCompMiraLaser::LaserDataT&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompMiraLaser
{

class LaserReporter : public virtual ::Ice::Object
{
public:

    typedef LaserReporterPrx ProxyType;
    typedef LaserReporterPtr PointerType;

    virtual ~LaserReporter();

#ifdef ICE_CPP11_COMPILER
    LaserReporter() = default;
    LaserReporter(const LaserReporter&) = default;
    LaserReporter& operator=(const LaserReporter&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void toggleLaserReport(bool enable, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_toggleLaserReport(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const LaserReporter& lhs, const LaserReporter& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const LaserReporter& lhs, const LaserReporter& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class Laser : public virtual ::Ice::Object
{
public:

    typedef LaserPrx ProxyType;
    typedef LaserPtr PointerType;

    virtual ~Laser();

#ifdef ICE_CPP11_COMPILER
    Laser() = default;
    Laser(const Laser&) = default;
    Laser& operator=(const Laser&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void reportLaserData(const LaserDataT& data, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_reportLaserData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Laser& lhs, const Laser& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Laser& lhs, const Laser& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompMiraLaser::PointT>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompMiraLaser::PointT, S>
{
    static void write(S* ostr, const ::RoboCompMiraLaser::PointT& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.angle);
        ostr->write(v.range);
    }
};

template<typename S>
struct StreamReader< ::RoboCompMiraLaser::PointT, S>
{
    static void read(S* istr, ::RoboCompMiraLaser::PointT& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.angle);
        istr->read(v.range);
    }
};

}
/// \endcond

namespace RoboCompMiraLaser
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompMiraLaser::LaserReporter::begin_toggleLaserReport.
 * Create a wrapper instance by calling ::RoboCompMiraLaser::newCallback_LaserReporter_toggleLaserReport.
 */
template<class T>
class CallbackNC_LaserReporter_toggleLaserReport : public Callback_LaserReporter_toggleLaserReport_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LaserReporter_toggleLaserReport(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::LaserReporter::begin_toggleLaserReport.
 */
template<class T> Callback_LaserReporter_toggleLaserReportPtr
newCallback_LaserReporter_toggleLaserReport(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LaserReporter_toggleLaserReport<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::LaserReporter::begin_toggleLaserReport.
 */
template<class T> Callback_LaserReporter_toggleLaserReportPtr
newCallback_LaserReporter_toggleLaserReport(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LaserReporter_toggleLaserReport<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::LaserReporter::begin_toggleLaserReport.
 */
template<class T> Callback_LaserReporter_toggleLaserReportPtr
newCallback_LaserReporter_toggleLaserReport(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LaserReporter_toggleLaserReport<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::LaserReporter::begin_toggleLaserReport.
 */
template<class T> Callback_LaserReporter_toggleLaserReportPtr
newCallback_LaserReporter_toggleLaserReport(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LaserReporter_toggleLaserReport<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompMiraLaser::LaserReporter::begin_toggleLaserReport.
 * Create a wrapper instance by calling ::RoboCompMiraLaser::newCallback_LaserReporter_toggleLaserReport.
 */
template<class T, typename CT>
class Callback_LaserReporter_toggleLaserReport : public Callback_LaserReporter_toggleLaserReport_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LaserReporter_toggleLaserReport(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::LaserReporter::begin_toggleLaserReport.
 */
template<class T, typename CT> Callback_LaserReporter_toggleLaserReportPtr
newCallback_LaserReporter_toggleLaserReport(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LaserReporter_toggleLaserReport<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::LaserReporter::begin_toggleLaserReport.
 */
template<class T, typename CT> Callback_LaserReporter_toggleLaserReportPtr
newCallback_LaserReporter_toggleLaserReport(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LaserReporter_toggleLaserReport<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::LaserReporter::begin_toggleLaserReport.
 */
template<class T, typename CT> Callback_LaserReporter_toggleLaserReportPtr
newCallback_LaserReporter_toggleLaserReport(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LaserReporter_toggleLaserReport<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::LaserReporter::begin_toggleLaserReport.
 */
template<class T, typename CT> Callback_LaserReporter_toggleLaserReportPtr
newCallback_LaserReporter_toggleLaserReport(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LaserReporter_toggleLaserReport<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompMiraLaser::Laser::begin_reportLaserData.
 * Create a wrapper instance by calling ::RoboCompMiraLaser::newCallback_Laser_reportLaserData.
 */
template<class T>
class CallbackNC_Laser_reportLaserData : public Callback_Laser_reportLaserData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Laser_reportLaserData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::Laser::begin_reportLaserData.
 */
template<class T> Callback_Laser_reportLaserDataPtr
newCallback_Laser_reportLaserData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Laser_reportLaserData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::Laser::begin_reportLaserData.
 */
template<class T> Callback_Laser_reportLaserDataPtr
newCallback_Laser_reportLaserData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Laser_reportLaserData<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::Laser::begin_reportLaserData.
 */
template<class T> Callback_Laser_reportLaserDataPtr
newCallback_Laser_reportLaserData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Laser_reportLaserData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::Laser::begin_reportLaserData.
 */
template<class T> Callback_Laser_reportLaserDataPtr
newCallback_Laser_reportLaserData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Laser_reportLaserData<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompMiraLaser::Laser::begin_reportLaserData.
 * Create a wrapper instance by calling ::RoboCompMiraLaser::newCallback_Laser_reportLaserData.
 */
template<class T, typename CT>
class Callback_Laser_reportLaserData : public Callback_Laser_reportLaserData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Laser_reportLaserData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::Laser::begin_reportLaserData.
 */
template<class T, typename CT> Callback_Laser_reportLaserDataPtr
newCallback_Laser_reportLaserData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Laser_reportLaserData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::Laser::begin_reportLaserData.
 */
template<class T, typename CT> Callback_Laser_reportLaserDataPtr
newCallback_Laser_reportLaserData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Laser_reportLaserData<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::Laser::begin_reportLaserData.
 */
template<class T, typename CT> Callback_Laser_reportLaserDataPtr
newCallback_Laser_reportLaserData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Laser_reportLaserData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompMiraLaser::Laser::begin_reportLaserData.
 */
template<class T, typename CT> Callback_Laser_reportLaserDataPtr
newCallback_Laser_reportLaserData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Laser_reportLaserData<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
